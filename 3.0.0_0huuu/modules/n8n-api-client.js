const N8NApiClient={apiKey:null,apiUrl:null,initialized:!1,async init(){try{const t=await chrome.storage.local.get(["n8nApiKey","n8nApiUrl","enableHistory"]);return t.n8nApiKey&&(this.apiKey=t.n8nApiKey),t.n8nApiUrl?this.apiUrl=t.n8nApiUrl:this.apiUrl=this.detectApiUrl(),this.initialized=!0,t.enableHistory&&this.apiKey&&this.startWorkflowBackupMonitoring(),!0}catch(t){return!1}},detectApiUrl(){const t=window.location.origin,e=window.location.hostname;return"localhost"===e||e.match(/^\d+\.\d+\.\d+\.\d+$/),`${t}/api`},startWorkflowBackupMonitoring(){window.addEventListener("n8n-workflow-saved",(async t=>{const{workflowId:e,workflow:a}=t.detail;await this.backupWorkflowToApi(e,a)}))},async backupWorkflowToApi(t,e=null){try{if(!this.apiKey){const a=e||{name:"Workflow Backup",nodes:[],connections:{},pinData:{},meta:{instanceId:"n8n-master-export"},settings:{},staticData:{},tags:[],triggerCount:0,mode:"manual"};return await this.saveWorkflowToHistory(t,a,"fallback"),this.showBackupNotification("warning","⚠️ API backup unavailable, used fallback"),!1}try{const a=await this.getWorkflowById(t);return a&&a.nodes?(await this.saveWorkflowToHistory(t,a,"api"),this.showBackupNotification("success","✅ Workflow backup via API completed"),!0):e&&e.nodes?(await this.saveWorkflowToHistory(t,e,"local"),this.showBackupNotification("warning","⚠️ Used local workflow data"),!0):(this.showBackupNotification("error","❌ No workflow data available"),!1)}catch(a){return e&&e.nodes?(await this.saveWorkflowToHistory(t,e,"local_fallback"),this.showBackupNotification("warning","⚠️ API failed, used local data"),!0):(this.showBackupNotification("error","❌ API backup failed: "+a.message),!1)}}catch(t){return this.showBackupNotification("error","❌ Backup failed: "+t.message),!1}},async getWorkflowById(t){if(await this.ensureInitialized(),!this.apiKey)throw new Error("No API key available");if(t.startsWith("new_workflow_"))return null;try{const e=await fetch(`${this.apiUrl}/v1/workflows/${t}`,{method:"GET",headers:{"X-N8N-API-KEY":this.apiKey,"Content-Type":"application/json"}});if(e.ok){return await e.json()}if(404===e.status)return null;throw new Error(`API request failed: ${e.status} ${e.statusText}`)}catch(t){throw t}},async saveWorkflowToHistory(t,e,a="api"){try{let i=0;e.nodes&&(i=Array.isArray(e.nodes)?e.nodes.length:Object.keys(e.nodes).length);const o={timestamp:Date.now(),workflow:e,nodeCount:i,source:a,id:Date.now().toString()};if(void 0!==window.IndexedDBManager&&window.IndexedDBManager.db)await window.IndexedDBManager.saveWorkflowHistory(t,o),await window.IndexedDBManager.limitWorkflowHistory(t,100);else{const e=`workflow_history_${t}`;let a=(await chrome.storage.local.get([e]))[e]||[];for(a.unshift(o);a.length>100;)a.pop();await chrome.storage.local.set({[e]:a})}return!0}catch(t){throw t}},showBackupNotification(t,e){try{window.showNotificationInPage&&window.showNotificationInPage(t,e)}catch(t){}},async getStatus(){return await this.ensureInitialized(),{initialized:this.initialized,hasApiKey:!!this.apiKey,hasApiUrl:!!this.apiUrl,apiUrl:this.apiUrl}},async ensureInitialized(){this.initialized||await this.init()},async testConnection(){if(await this.ensureInitialized(),!this.apiKey)return{success:!1,error:"No API key"};try{const t=await fetch(`${this.apiUrl}/v1/workflows`,{method:"GET",headers:{"X-N8N-API-KEY":this.apiKey,"Content-Type":"application/json"}});return t.ok?{success:!0,status:t.status}:{success:!1,status:t.status}}catch(t){return{success:!1,error:t.message}}},async testApiKey(t=null){const e=t||this.apiKey;if(!e)return{success:!1,error:"No API key provided"};const a=this.apiUrl||this.detectApiUrl();try{const t=await fetch(`${a}/v1/workflows`,{method:"GET",headers:{"X-N8N-API-KEY":e,"Content-Type":"application/json"}});return t.ok?{success:!0,status:t.status,message:"API key is valid",apiUrl:a}:401===t.status?{success:!1,status:t.status,error:"Invalid API key - Access denied"}:403===t.status?{success:!1,status:t.status,error:"API key valid but insufficient permissions"}:{success:!1,status:t.status,error:`API request failed: ${t.statusText}`}}catch(t){return{success:!1,error:`Connection failed: ${t.message}`}}},async getWorkflows(){if(await this.ensureInitialized(),!this.apiKey)throw new Error("No API key available");try{const t=await fetch(`${this.apiUrl}/v1/workflows`,{headers:{"X-N8N-API-KEY":this.apiKey,"Content-Type":"application/json"}});if(t.ok){return await t.json()}throw new Error(`API request failed: ${t.status}`)}catch(t){throw t}},async saveWorkflow(t){if(await this.ensureInitialized(),!this.apiKey)throw new Error("No API key available");try{const e=await fetch(`${this.apiUrl}/v1/workflows`,{method:"POST",headers:{"X-N8N-API-KEY":this.apiKey,"Content-Type":"application/json"},body:JSON.stringify(t)});if(e.ok){return await e.json()}throw new Error(`Failed to save workflow: ${e.status}`)}catch(t){throw t}},async clearWorkflowCache(){try{const t=await chrome.storage.local.get(null),e=Object.keys(t).filter((t=>t.startsWith("workflow_history_")));return e.length>0&&await chrome.storage.local.remove(e),e.length}catch(t){throw t}},async getExecutionById(t){if(await this.ensureInitialized(),!this.apiKey)throw new Error("No API key available");try{const e=await fetch(`${this.apiUrl}/v1/executions/${t}?includeData=true`,{method:"GET",headers:{"X-N8N-API-KEY":this.apiKey,"Content-Type":"application/json"}});if(e.ok){return await e.json()}throw 404===e.status?new Error(`Execution ${t} not found`):new Error(`API request failed: ${e.status} ${e.statusText}`)}catch(t){throw t}},async getExecutions(t=20,e=null){if(await this.ensureInitialized(),!this.apiKey)throw new Error("No API key available");try{const a=new URLSearchParams;a.append("limit",t.toString()),a.append("includeData","true"),e&&a.append("workflowId",e);const i=`${this.apiUrl}/v1/executions?${a.toString()}`,o=await fetch(i,{method:"GET",headers:{"X-N8N-API-KEY":this.apiKey,"Content-Type":"application/json"}});if(o.ok){const t=await o.json();return t.data||t}throw new Error(`Failed to get executions: ${o.status} ${o.statusText}`)}catch(t){throw t}},async getExecutionsForNode(t,e=20,a=null){if(await this.ensureInitialized(),!this.apiKey)throw new Error("No API key available");if(!t)throw new Error("Node name is required for filtering");try{const i=await this.getExecutions(e,a);return i.filter((e=>{try{const a=e?.data?.resultData?.runData?.[t];return!!a}catch(t){return!1}}))}catch(t){throw t}},async getExecution(t,e=!1){if(await this.ensureInitialized(),!this.apiKey)throw new Error("No API key available");try{const a=e?`${this.apiUrl}/v1/executions/${t}?includeData=true`:`${this.apiUrl}/v1/executions/${t}`,i=await fetch(a,{method:"GET",headers:{"X-N8N-API-KEY":this.apiKey,"Content-Type":"application/json"}});if(i.ok){return await i.json()}throw 404===i.status?new Error(`Execution ${t} not found`):new Error(`Failed to get execution: ${i.status} ${i.statusText}`)}catch(t){throw t}},async updateWorkflow(t,e){if(await this.ensureInitialized(),!this.apiKey)throw new Error("No API key available");if(!e||"object"!=typeof e)throw new Error("Invalid workflow data provided");if(!e.nodes||!Array.isArray(e.nodes))throw new Error("Workflow must contain valid nodes array");try{const a={};if(e.settings){const t=["saveExecutionProgress","saveManualExecutions","saveDataErrorExecution","saveDataSuccessExecution","executionTimeout","errorWorkflow","timezone","executionOrder"];for(const i of t)void 0!==e.settings[i]&&(a[i]=e.settings[i])}const i={name:e.name,nodes:e.nodes,connections:e.connections||{},settings:a,staticData:e.staticData||{}};Object.keys(i).forEach((t=>{void 0===i[t]&&delete i[t]}));const o=["name","nodes","connections","active","settings","staticData","pinData","versionId"];Object.keys(i).filter((t=>!o.includes(t))).length;const n=await fetch(`${this.apiUrl}/v1/workflows/${t}`,{method:"PUT",headers:{"X-N8N-API-KEY":this.apiKey,"Content-Type":"application/json"},body:JSON.stringify(i)});if(n.ok){return await n.json()}{const t=await n.text();throw new Error(`Failed to update workflow: ${n.status} ${n.statusText}\n${t}`)}}catch(t){throw t}},convertExecutionToPinData(t){try{if(!(t&&t.data&&t.data.resultData&&t.data.resultData.runData))throw new Error("Invalid execution data structure");const e=t.data.resultData.runData,a={};for(const[t,i]of Object.entries(e)){if(!(i&&i[0]&&i[0].data&&i[0].data.main))continue;const e=i[0].data.main[0];e&&Array.isArray(e)&&(a[t]=e.map((t=>({json:t.json||{}}))))}return a}catch(t){throw new Error(`Failed to convert execution data: ${t.message}`)}},async processExecutionCopy(t,e){try{const a=await this.getExecutionById(t);if(!a)throw new Error("Execution not found");const i=await this.getWorkflowById(e);if(!i)throw new Error("Workflow not found");const o=this.convertExecutionToPinData(a);if(0===Object.keys(o).length)throw new Error("No valid execution data found to convert");i.staticData||(i.staticData={}),i.staticData.executionCopy={executionId:t,timestamp:Date.now(),data:o,source:"n8n-master-extension"};const n=await this.updateWorkflow(e,i);return{success:!0,message:"Execution data saved to workflow staticData (API doesn't support pinData)",nodesUpdated:Object.keys(o).length,executionId:t,workflowId:e,workflow:n,pinData:o,apiLimitation:"N8N API does not support pinData updates. Data saved to staticData instead."}}catch(a){return{success:!1,error:a.message,executionId:t,workflowId:e}}}};"undefined"!=typeof window&&(N8NApiClient.init(),window.N8NApiClient=N8NApiClient,window.N8NApiTester={async testApiKey(t=null){const e=await N8NApiClient.testApiKey(t);return this.showVisualResult("API Key Test",e),e},async testConnection(){const t=await N8NApiClient.testConnection();return this.showVisualResult("Connection Test",t),t},showVisualResult(t,e){const a=document.createElement("div");a.style.cssText=`\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        z-index: 999999;\n        padding: 15px 20px;\n        border-radius: 8px;\n        color: white;\n        font-family: Arial, sans-serif;\n        font-size: 14px;\n        font-weight: bold;\n        max-width: 300px;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n        background: ${e.success?"#4CAF50":"#f44336"};\n      `;const i=e.success?"✅":"❌",o=e.success?e.message||"Test passed":e.error||"Test failed";a.innerHTML=`\n        <div style="margin-bottom: 5px;">\n          ${i} <strong>${t}</strong>\n        </div>\n        <div style="font-size: 12px; opacity: 0.9;">\n          ${o}\n        </div>\n        ${e.status?`<div style="font-size: 11px; margin-top: 5px; opacity: 0.7;">Status: ${e.status}</div>`:""}\n      `,document.body.appendChild(a),setTimeout((()=>{a.parentNode&&a.parentNode.removeChild(a)}),5e3),a.onclick=()=>{a.parentNode&&a.parentNode.removeChild(a)}},addTestButton(){const t=document.getElementById("n8n-api-test-btn");t&&t.remove();const e=document.createElement("button");e.id="n8n-api-test-btn",e.innerHTML="🧪 Test N8N API",e.style.cssText="\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        z-index: 999999;\n        padding: 10px 15px;\n        background: #007bff;\n        color: white;\n        border: none;\n        border-radius: 6px;\n        font-size: 12px;\n        cursor: pointer;\n        box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n      ",e.onclick=async()=>{e.disabled=!0,e.innerHTML="🔄 Testing...",await this.testConnection(),await new Promise((t=>setTimeout(t,1e3))),await this.testApiKey(),e.disabled=!1,e.innerHTML="🧪 Test N8N API"},document.body.appendChild(e),setTimeout((()=>{e.parentNode&&e.parentNode.removeChild(e)}),3e4)}},document.addEventListener("keydown",(t=>{t.ctrlKey&&t.shiftKey&&"T"===t.key&&(t.preventDefault(),window.N8NApiTester.addTestButton())}))),"undefined"!=typeof module&&module.exports&&(module.exports=N8NApiClient);