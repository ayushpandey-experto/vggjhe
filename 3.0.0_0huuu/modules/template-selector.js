const TemplateSelector={templates:null,isInitialized:!1,async init(){if(!this.isInitialized)try{await this.loadLocalTemplates(),this.isInitialized=!0}catch(t){}},async loadLocalTemplates(){try{const t=await fetch(chrome.runtime.getURL("awesome-n8n-templates.json"));if(!t.ok)throw new Error(`Failed to load templates: HTTP ${t.status}`);const e=await t.json();if(!e.templates||!Array.isArray(e.templates))throw new Error("Invalid templates file format");this.templates=e.templates;e.meta}catch(t){throw this.templates=[],t}},prepareTemplatesForAI(t){if(!this.templates||0===this.templates.length)return null;const e=this.templates.map(((t,e)=>({id:e+1,name:t.name,description:t.description,filePath:t.filePath})));return{userQuery:t.trim(),availableTemplates:e,totalCount:e.length}},findTemplateByPath(t){if(!this.templates)return null;const e=this.templates.find((e=>e.filePath===t));return e||null},getStats(){if(!this.templates)return null;const t={};return this.templates.forEach((e=>{const a=e.filePath.split("/")[0];t[a]=(t[a]||0)+1})),{total:this.templates.length,categories:t,isLoaded:this.isInitialized}}};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>{setTimeout((()=>TemplateSelector.init()),1e3)})):setTimeout((()=>TemplateSelector.init()),1e3),window.TemplateSelector=TemplateSelector;