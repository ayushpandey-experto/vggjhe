const UnifiedDatabaseManager={config:{dbName:"N8NMaster",dbVersion:null,stores:{projects:"projects",workflows:"workflows",workflowHistory:"workflowHistory",variables:"variables",outputTemplates:"outputTemplates",dialogs:"dialogs"}},db:null,async init(){return new Promise(((e,t)=>{this.getCurrentDatabaseVersion().then((s=>{this.config.dbVersion=s;const o=indexedDB.open(this.config.dbName,this.config.dbVersion);o.onerror=()=>{t(o.error)},o.onsuccess=()=>{this.db=o.result,this.ensureAllStoresExist().then((()=>{this.migrateFromOldDatabases().then((()=>{e(this.db)})).catch((t=>{e(this.db)}))})).catch((e=>{t(e)}))},o.onupgradeneeded=e=>{const t=e.target.result;e.oldVersion,e.newVersion;this.createDatabaseSchema(t)}})).catch((e=>{t(e)}))}))},async getCurrentDatabaseVersion(){return new Promise(((e,t)=>{const s=indexedDB.open(this.config.dbName);s.onsuccess=()=>{const t=s.result,o=t.version;t.close(),e(o||1)},s.onerror=()=>{e(1)}}))},async ensureAllStoresExist(){return new Promise(((e,t)=>{if(!this.db)return void t(new Error("Database not initialized"));const s=Object.values(this.config.stores),o=Array.from(this.db.objectStoreNames);if(s.filter((e=>!o.includes(e))).length>0){const s=this.db.version;this.db.close();const o=indexedDB.open(this.config.dbName,s+1);o.onupgradeneeded=e=>{const t=e.target.result;this.createDatabaseSchema(t)},o.onsuccess=()=>{this.db=o.result,this.config.dbVersion=this.db.version,e()},o.onerror=()=>{t(o.error)}}else e()}))},async checkAndFixDatabaseStructure(){return new Promise(((e,t)=>{const s=indexedDB.open(this.config.dbName);s.onsuccess=()=>{const o=s.result,r=Object.values(this.config.stores),a=Array.from(o.objectStoreNames);if(r.filter((e=>!a.includes(e))).length>0){const s=o.version;o.close();const r=indexedDB.open(this.config.dbName,s+1);r.onupgradeneeded=e=>{const t=e.target.result;this.createDatabaseSchema(t)},r.onsuccess=()=>{r.result.close(),e()},r.onerror=()=>{t(r.error)}}else o.close(),e()},s.onerror=()=>{e()}}))},createDatabaseSchema(e){if(!e.objectStoreNames.contains(this.config.stores.projects)){const t=e.createObjectStore(this.config.stores.projects,{keyPath:"id"});t.createIndex("name","name",{unique:!1}),t.createIndex("createdAt","createdAt",{unique:!1}),t.createIndex("color","color",{unique:!1})}if(!e.objectStoreNames.contains(this.config.stores.workflows)){const t=e.createObjectStore(this.config.stores.workflows,{keyPath:"id"});t.createIndex("projectId","projectId",{unique:!1}),t.createIndex("name","name",{unique:!1}),t.createIndex("createdAt","createdAt",{unique:!1})}if(!e.objectStoreNames.contains(this.config.stores.workflowHistory)){const t=e.createObjectStore(this.config.stores.workflowHistory,{keyPath:"id"});t.createIndex("workflowId","workflowId",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("source","source",{unique:!1})}if(!e.objectStoreNames.contains(this.config.stores.variables)){const t=e.createObjectStore(this.config.stores.variables,{keyPath:"id",autoIncrement:!0});t.createIndex("name","name",{unique:!0}),t.createIndex("created","created",{unique:!1})}if(!e.objectStoreNames.contains(this.config.stores.outputTemplates)){const t=e.createObjectStore(this.config.stores.outputTemplates,{keyPath:"id"});t.createIndex("name","name",{unique:!0}),t.createIndex("timestamp","timestamp",{unique:!1}),t.createIndex("createdAt","createdAt",{unique:!1})}if(!e.objectStoreNames.contains(this.config.stores.dialogs)){const t=e.createObjectStore(this.config.stores.dialogs,{keyPath:"id"});t.createIndex("type","type",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1})}},async save(e,t){if(!this.db)throw new Error("Database not initialized");const s=this.db.transaction([e],"readwrite").objectStore(e);return new Promise(((e,o)=>{const r=s.put(t);r.onsuccess=()=>e(r.result),r.onerror=()=>o(r.error)}))},async getAll(e){if(!this.db)throw new Error("Database not initialized");const t=this.db.transaction([e],"readonly").objectStore(e);return new Promise(((e,s)=>{const o=t.getAll();o.onsuccess=()=>e(o.result),o.onerror=()=>s(o.error)}))},async getById(e,t){if(!this.db)throw new Error("Database not initialized");const s=this.db.transaction([e],"readonly").objectStore(e);return new Promise(((e,o)=>{const r=s.get(t);r.onsuccess=()=>e(r.result),r.onerror=()=>o(r.error)}))},async delete(e,t){if(!this.db)throw new Error("Database not initialized");const s=this.db.transaction([e],"readwrite").objectStore(e);return new Promise(((e,o)=>{const r=s.delete(t);r.onsuccess=()=>e(r.result),r.onerror=()=>o(r.error)}))},async getByIndex(e,t,s){if(!this.db)throw new Error("Database not initialized");const o=this.db.transaction([e],"readonly").objectStore(e).index(t);return new Promise(((e,t)=>{const r=o.getAll(s);r.onsuccess=()=>e(r.result),r.onerror=()=>t(r.error)}))},async clearStore(e){if(!this.db)throw new Error("Database not initialized");const t=this.db.transaction([e],"readwrite").objectStore(e);return new Promise(((e,s)=>{const o=t.clear();o.onsuccess=()=>e(o.result),o.onerror=()=>s(o.error)}))},async saveProject(e){return this.save(this.config.stores.projects,e)},async getAllProjects(){return this.getAll(this.config.stores.projects)},async deleteProject(e){return this.delete(this.config.stores.projects,e)},async saveWorkflow(e){return this.save(this.config.stores.workflows,e)},async getAllWorkflows(){return this.getAll(this.config.stores.workflows)},async getWorkflowsByProject(e){return this.getByIndex(this.config.stores.workflows,"projectId",e)},async deleteWorkflow(e){return this.delete(this.config.stores.workflows,e)},async saveWorkflowHistory(e,t){const s={...t,id:`${e}_${t.timestamp}`,workflowId:e};return this.save(this.config.stores.workflowHistory,s)},async getWorkflowHistory(e){return(await this.getByIndex(this.config.stores.workflowHistory,"workflowId",e)).sort(((e,t)=>t.timestamp-e.timestamp))},async deleteWorkflowHistory(e){const t=(await this.getByIndex(this.config.stores.workflowHistory,"workflowId",e)).map((e=>this.delete(this.config.stores.workflowHistory,e.id)));return Promise.all(t)},async saveVariable(e){return this.save(this.config.stores.variables,e)},async getAllVariables(){return this.getAll(this.config.stores.variables)},async deleteVariable(e){return this.delete(this.config.stores.variables,e)},async saveOutputTemplate(e){return this.save(this.config.stores.outputTemplates,e)},async getAllOutputTemplates(){return this.getAll(this.config.stores.outputTemplates)},async getOutputTemplateByName(e){return(await this.getByIndex(this.config.stores.outputTemplates,"name",e))[0]||null},async deleteOutputTemplate(e){return this.delete(this.config.stores.outputTemplates,e)},async saveDialog(e){return this.save(this.config.stores.dialogs,e)},async getAllDialogs(){return this.getAll(this.config.stores.dialogs)},async deleteDialog(e){return this.delete(this.config.stores.dialogs,e)},async migrateFromOldDatabases(){try{await this.migrateFromLocalProjectsDB(),await this.migrateFromVariablesDB(),await this.migrateFromDialogsDB()}catch(e){throw e}},async migrateFromLocalProjectsDB(){return new Promise(((e,t)=>{const s=indexedDB.open("LocalProjectsDB");s.onsuccess=async()=>{const o=s.result;try{if(o.objectStoreNames.contains("projects")){const e=await this.getDataFromOldDB(o,"projects");for(const t of e)await this.saveProject(t)}if(o.objectStoreNames.contains("workflows")){const e=await this.getDataFromOldDB(o,"workflows");for(const t of e)await this.saveWorkflow(t)}if(o.objectStoreNames.contains("outputTemplates")){const e=await this.getDataFromOldDB(o,"outputTemplates");for(const t of e)await this.saveOutputTemplate(t)}o.close(),e()}catch(e){o.close(),t(e)}},s.onerror=()=>{e()}}))},async migrateFromVariablesDB(){return new Promise(((e,t)=>{const s=indexedDB.open("N8NMasterVariables");s.onsuccess=async()=>{const o=s.result;try{if(o.objectStoreNames.contains("variables")){const e=await this.getDataFromOldDB(o,"variables");for(const t of e)await this.saveVariable(t)}o.close(),e()}catch(e){o.close(),t(e)}},s.onerror=()=>{e()}}))},async migrateFromDialogsDB(){return new Promise(((e,t)=>{const s=indexedDB.open("N8nMasterDialogs");s.onsuccess=async()=>{const o=s.result;try{if(o.objectStoreNames.contains("dialogs")){const e=await this.getDataFromOldDB(o,"dialogs");for(const t of e)await this.saveDialog(t)}o.close(),e()}catch(e){o.close(),t(e)}},s.onerror=()=>{e()}}))},getDataFromOldDB:async(e,t)=>new Promise(((s,o)=>{const r=e.transaction([t],"readonly").objectStore(t).getAll();r.onsuccess=()=>s(r.result),r.onerror=()=>o(r.error)}))};"undefined"!=typeof window&&(window.UnifiedDatabaseManager=UnifiedDatabaseManager);