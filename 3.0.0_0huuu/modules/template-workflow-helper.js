const TemplateWorkflowHelper={isWorkflowCreationRequest:function(e){const n=e.toLowerCase(),t=["create a workflow","create workflow","build a workflow","build workflow","make a workflow","make workflow","generate a workflow","generate workflow","—Å–æ–∑–¥–∞–π –≤–æ—Ä–∫—Ñ–ª–æ—É","—Å–æ–∑–¥–∞—Ç—å –≤–æ—Ä–∫—Ñ–ª–æ—É","—Å–¥–µ–ª–∞–π –≤–æ—Ä–∫—Ñ–ª–æ—É","—Å–¥–µ–ª–∞—Ç—å –≤–æ—Ä–∫—Ñ–ª–æ—É","–ø–æ—Å—Ç—Ä–æ–π –≤–æ—Ä–∫—Ñ–ª–æ—É","–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–æ—Ä–∫—Ñ–ª–æ—É","—Å–æ–∑–¥–∞–π workflow","—Å–æ–∑–¥–∞—Ç—å workflow","—Å–æ–∑–¥–∞–π —Å—Ö–µ–º—É","—Å–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É","—Å–¥–µ–ª–∞–π —Å—Ö–µ–º—É","—Å–¥–µ–ª–∞—Ç—å —Å—Ö–µ–º—É"].some((e=>n.includes(e.toLowerCase()))),a=["what does this","—á—Ç–æ —Ç—É—Ç","—á—Ç–æ —ç—Ç–æ","—á—Ç–æ –¥–µ–ª–∞–µ—Ç","–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç","explain this","analyze this","describe this","tell me about","what is this","what's this","how does this work","what happens","—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç","–æ–±—ä—è—Å–Ω–∏","—Ä–∞—Å—Å–∫–∞–∂–∏","–æ–ø–∏—à–∏"].some((e=>n.includes(e.toLowerCase())));return t&&!a},createTemplateSelectionPrompt:function(e){return`You are a workflow template selector. Analyze the user's request and determine if any of the available templates match their needs.\n\nUSER REQUEST: "${e.userQuery}"\n\nAVAILABLE TEMPLATES (${e.totalCount} total):\n${e.availableTemplates.map(((e,n)=>`\n${n+1}. NAME: "${e.name}"\n   DESCRIPTION: "${e.description}"\n   FILE_PATH: "${e.filePath}"\n`)).join("")}\n\nTASK: \n1. Analyze the user's request\n2. Find the SINGLE BEST matching template from the list above, if any exists\n3. Consider synonyms and related concepts (e.g., "YouTube" matches "video", "email" matches "Gmail", etc.)\n4. Only select a template if it's truly relevant (minimum 70% match)\n\nRESPONSE FORMAT (JSON only):\n{\n  "hasMatch": true/false,\n  "selectedTemplate": {\n    "name": "exact name from list",\n    "filePath": "exact filePath from list"\n  } OR null,\n  "explanation": "Brief explanation of why this template was selected or why no match was found",\n  "confidence": 0.0-1.0\n}\n\nReturn ONLY the JSON response, no additional text.`},askAIForTemplateSelection:async function(e){try{const n=this.createTemplateSelectionPrompt(e),t=await chrome.runtime.sendMessage({action:"chatWithAI",prompt:n,isTemplateSelection:!0});if(t.success&&t.response)try{const e=JSON.parse(t.response);if(e.hasMatch&&e.selectedTemplate&&e.confidence>=.7)return e}catch(e){}return null}catch(e){return null}},formatTemplateResponse:function(e,n,t){let a=`## üìã Found Perfect Template!\n\n**${e.name}**\n\n${t}\n`;if("json"===n.type){a+=`\n### Workflow JSON:\n\`\`\`json\n${JSON.stringify(n.workflow,null,2)}\n\`\`\`\n`}else if("text"===n.type){const e=n.workflow;let t=null;try{const n=[/\{[\s\S]*?"nodes"\s*:\s*\[[\s\S]*?"connections"\s*:\s*\{[\s\S]*?\}/,/\{[\s\S]*?"nodes"\s*:\s*\[[\s\S]*?\]/];for(let a=0;a<n.length;a++){const o=n[a],s=e.match(o);if(s){let n=e.indexOf(s[0]),a=0,o=n;for(let t=n;t<e.length;t++)if("{"===e[t]&&a++,"}"===e[t]&&a--,0===a&&t>n){o=t;break}const r=e.substring(n,o+1);try{const e=JSON.parse(r);if(e.nodes&&Array.isArray(e.nodes)&&e.nodes.length>0){if(e.nodes.length>0&&r.length>500&&(e.connections||1===e.nodes.length)){t=e;break}}}catch(e){}}}}catch(e){}if(!t)try{const n=e.match(/```json\s*([\s\S]*?)\s*```/g);if(n){const e=n.map((e=>{const n=e.replace(/```json\s*/,"").replace(/\s*```$/,"");return{block:e,content:n,size:n.length}})).sort(((e,n)=>n.size-e.size));for(const n of e)try{const e=JSON.parse(n.content);if(e.nodes&&Array.isArray(e.nodes)&&e.nodes.length>0){if(e.nodes.length>0&&n.size>500&&(e.connections||1===e.nodes.length)){t=e;break}}}catch(e){}}}catch(e){}if(!t)try{const n=[];let a=0,o=-1;for(let t=0;t<e.length;t++)"{"===e[t]?(0===a&&(o=t),a++):"}"===e[t]&&(a--,0===a&&-1!==o&&(n.push(e.substring(o,t+1)),o=-1));for(const e of n)try{const n=JSON.parse(e);if(n.nodes&&Array.isArray(n.nodes)&&n.nodes.length>0){if(n.nodes.length>0&&e.length>500&&(n.connections||1===n.nodes.length)){t=n;break}}}catch(e){}}catch(e){}if(t){a+=`\n### Workflow JSON:\n\`\`\`json\n${JSON.stringify(t,null,2)}\n\`\`\`\n\n`,a+="### üìù How to Use:\n1. **Copy the JSON above**\n2. **Open n8n** and create a new workflow\n3. **Paste the JSON** using Ctrl+V or the import function\n4. **Configure** any required credentials or settings\n\n"}else{a+=`\n### ‚ö†Ô∏è ${I18nManager.getMessage("templateProcessingIssue")}\n\n${I18nManager.getMessage("templateProcessingIssueDesc")}\n\n`,a+='### üí° Manual Steps:\n1. **Look for JSON structure** in the original template\n2. **Copy the part** that starts with `{` and contains `"nodes"` array\n3. **Import manually** into n8n\n\n';a+=`### Template Preview:\n\`\`\`\n${e.length>500?e.substring(0,500)+"...\n\n[Content truncated - see original template for full content]":e}\n\`\`\`\n`}}else{const e=String(n.workflow);a+=`\n### Template Content:\n\`\`\`\n${e.length>1e3?e.substring(0,1e3)+"...\n\n[Content truncated]":e}\n\`\`\`\n`}return a},processWorkflowCreationRequest:async function(e,n,t,a,o){try{if(!window.TemplateSelector||!window.TemplateSelector.isInitialized){if(!window.TemplateSelector){const e=window.I18nManager?window.I18nManager.getMessage("templateSelectorNotAvailable"):"TemplateSelector not available";throw new Error(e)}await window.TemplateSelector.init()}const s=window.TemplateSelector.prepareTemplatesForAI(e);if(s&&s.availableTemplates.length>0){const e=n("assistant",`üîç ${window.I18nManager?window.I18nManager.getMessage("searchingTemplates"):"Searching for matching templates"}<span class="loading-dots"></span>`,!0),r=await this.askAIForTemplateSelection(s);if(t(e),r&&r.hasMatch&&r.selectedTemplate){const e=window.TemplateSelector.findTemplateByPath(r.selectedTemplate.filePath);if(e){const s=n("assistant",`üì• ${window.I18nManager?window.I18nManager.getMessage("downloadingTemplate"):"Downloading template from GitHub"}<span class="loading-dots"></span>`,!0),l=await window.GitHubDownloader.downloadWorkflow(e.filePath);if(t(s),l.success){return n("assistant",this.formatTemplateResponse(e,l,r.explanation)),o(),a(),{success:!0,usedTemplate:!0,template:e}}{const e=window.I18nManager?window.I18nManager.getMessage("failedToDownloadTemplate"):"Failed to download template",t=window.I18nManager?window.I18nManager.getMessage("generatingCustomWorkflow"):"Generating custom workflow instead...";n("assistant",`‚ùå ${e}: ${l.error}\n\n${t}`)}}}}}catch(e){}return{success:!1,usedTemplate:!1,message:window.I18nManager?window.I18nManager.getMessage("proceedingCustomWorkflow"):"Proceeding with custom workflow generation"}}};window.TemplateWorkflowHelper=TemplateWorkflowHelper;